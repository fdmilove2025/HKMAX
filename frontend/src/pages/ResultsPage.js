import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { usePortfolio } from '../context/PortfolioContext';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';
import jsPDF from 'jspdf';
import LoadingScreen from '../components/LoadingScreen';

const ResultsPage = () => {
  const navigate = useNavigate();
  const {
    riskProfile,
    portfolioAllocation,
    securities,
    insights,
    resetQuestionnaire,
    answers,
    loading
  } = usePortfolio();

  // Redirect to home if no risk profile (means user hasn't completed questionnaire)
  useEffect(() => {
    if (!riskProfile && !loading) {
      navigate('/');
    }
  }, [riskProfile, navigate, loading]);

  // Function to handle "Adjust Risk Preferences" button
  const handleAdjustPreferences = () => {
    navigate('/questionnaire');
  };

  // Function to handle "Start Over" button
  const handleStartOver = () => {
    resetQuestionnaire();
    navigate('/questionnaire');
  };

  // Function to generate and download PDF report
  const handleDownloadPDF = () => {
    const doc = new jsPDF();

    // Add title
    doc.setFontSize(20);
    doc.setTextColor(0, 102, 255);
    doc.text('Your Investment Portfolio Report', 20, 20);

    // Add risk profile
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(`Risk Profile: ${riskProfile}`, 20, 35);

    // Add allocation table
    doc.setFontSize(14);
    doc.text('Portfolio Allocation:', 20, 50);

    let yPosition = 60;
    portfolioAllocation.forEach(item => {
      doc.setFontSize(10);
      doc.text(`${item.name}: ${item.value}%`, 25, yPosition);
      yPosition += 7;
    });

    // Add insights
    if (insights) {
      yPosition += 10;
      doc.setFontSize(14);
      doc.text('AI-Generated Insights:', 20, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      const insightLines = doc.splitTextToSize(insights, 170);
      insightLines.forEach(line => {
        doc.text(line, 25, yPosition);
        yPosition += 7;
      });
    }

    // Add securities recommendations
    yPosition += 10;
    doc.setFontSize(14);
    doc.text('Recommended Securities:', 20, yPosition);
    yPosition += 10;

    const assetClasses = [...new Set(securities.map(sec => sec.assetClass))];

    assetClasses.forEach(assetClass => {
      doc.setFontSize(12);
      doc.setTextColor(0, 102, 255);
      doc.text(assetClass, 20, yPosition);
      yPosition += 7;

      const assetSecurities = securities.filter(sec => sec.assetClass === assetClass);
      assetSecurities.forEach(security => {
        doc.setFontSize(10);
        doc.setTextColor(0, 0, 0);
        doc.text(`${security.name}`, 25, yPosition);
        yPosition += 7;

        // Handle long descriptions by breaking them into multiple lines
        const descriptionLines = doc.splitTextToSize(security.description, 170);
        descriptionLines.forEach(line => {
          doc.setFontSize(8);
          doc.text(line, 30, yPosition);
          yPosition += 5;
        });

        yPosition += 2;
      });

      yPosition += 5;
    });

    // Add footer
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    const date = new Date().toLocaleDateString();
    doc.text(`Generated by I-Buddy on ${date}. This report is for informational purposes only.`, 20, 280);

    // Save PDF
    doc.save('I-Buddy-Portfolio-Report.pdf');
  };

  // Pie chart colors
  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

  // Show loading screen while waiting for results
  if (loading) {
    return <LoadingScreen />;
  }

  // No data available
  if (!riskProfile) {
    return null;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="glass-panel rounded-xl mb-8 transition-all duration-300 animate-fade-in shadow-lg dark:shadow-dark-glow">
        <div className="px-6 py-8">
          <h2 className="text-2xl font-display font-bold gradient-text mb-6 animate-slide-up">Your Investment Portfolio</h2>

          {/* Risk Profile Section */}
          <div className="glass-panel p-6 rounded-xl mb-8 animate-slide-up border-l-4 border-futuristic-cyan dark:border-neon-blue" style={{ animationDelay: '100ms' }}>
            <h3 className="text-lg font-display font-medium text-futuristic-blue dark:text-neon-blue flex items-center">
              <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              Risk Profile: <span className="font-bold ml-1">{riskProfile}</span>
            </h3>
            <p className="mt-3 text-gray-600 dark:text-gray-300">
              {riskProfile === 'Conservative' && 'You prefer stability and consistent returns over high growth. Your portfolio is designed to minimize volatility while still providing modest growth.'}
              {riskProfile === 'Moderate' && 'You seek a balance between growth and stability. Your portfolio aims to provide steady growth with moderate risk.'}
              {riskProfile === 'Aggressive' && 'You prioritize growth and are comfortable with higher volatility. Your portfolio is designed to maximize long-term returns.'}
            </p>
          </div>

          {/* Portfolio Allocation Chart */}
          <div className="mb-8 animate-slide-up" style={{ animationDelay: '150ms' }}>
            <h3 className="text-lg font-display font-medium gradient-text mb-4 flex items-center">
              <svg className="w-5 h-5 mr-2 text-futuristic-blue dark:text-neon-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
              </svg>
              Portfolio Allocation
            </h3>

            <div className="glass-panel p-6 rounded-xl">
              <div className="flex flex-col md:flex-row">
                <div className="w-full md:w-1/2 h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={portfolioAllocation}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        label={false}
                      >
                        {portfolioAllocation.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip 
                        formatter={(value, name) => [`${value}%`, name]} 
                        contentStyle={{ 
                          backgroundColor: 'rgba(255, 255, 255, 0.9)', 
                          borderRadius: '0.75rem', 
                          border: 'none', 
                          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
                          backdropFilter: 'blur(10px)'
                        }} 
                      />
                      <Legend 
                        layout="horizontal" 
                        verticalAlign="bottom" 
                        align="center"
                        wrapperStyle={{
                          paddingTop: '20px'
                        }}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                </div>

                <div className="w-full md:w-1/2 mt-4 md:mt-0 md:pl-4">
                  <div className="glass-panel p-4 rounded-xl h-full bg-white dark:bg-dark-200">
                    <h4 className="text-md font-medium text-gray-900 dark:text-white mb-4">Allocation Breakdown</h4>
                    <ul className="space-y-3">
                      {portfolioAllocation.map((item, index) => (
                        <li key={index} className="flex items-center p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-dark-100/50 transition-colors duration-200">
                          <div
                            className="w-5 h-5 mr-3 rounded-md"
                            style={{ backgroundColor: COLORS[index % COLORS.length] }}
                          ></div>
                          <span className="text-gray-800 dark:text-gray-300">{item.name}: <span className="font-display font-medium text-futuristic-blue dark:text-neon-blue">{item.value}%</span></span>
                        </li>
                      ))}
                    </ul>

                    <div className="mt-6 p-3 bg-futuristic-blue/10 dark:bg-neon-blue/10 rounded-lg">
                      <p className="text-xs text-gray-600 dark:text-gray-300">
                        This allocation is tailored to your {riskProfile.toLowerCase()} risk profile and {answers?.timeHorizon || 'medium-term'}-year investment horizon.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* LLM Insights Section */}
          {insights && (
            <div className="glass-panel p-6 rounded-xl mb-8 animate-slide-up bg-gradient-to-br from-futuristic-blue/5 to-futuristic-cyan/5 dark:from-neon-blue/5 dark:to-futuristic-cyan/5" style={{ animationDelay: '200ms' }}>
              <h3 className="text-lg font-display font-medium gradient-text mb-4 flex items-center">
                <svg className="w-5 h-5 mr-2 text-futuristic-blue dark:text-neon-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
                AI-Generated Investment Insights
              </h3>
              <div className="whitespace-pre-line text-gray-600 dark:text-gray-300 bg-white/50 dark:bg-dark-100/50 p-4 rounded-lg backdrop-blur-sm">
                {insights}
              </div>
              <div className="mt-4 flex justify-end">
                <span className="inline-flex items-center text-xs text-futuristic-blue dark:text-neon-blue">
                  <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  Powered by AI
                </span>
              </div>
            </div>
          )}

          {/* Securities Recommendations Section */}
          {securities && securities.length > 0 && (
            <div className="glass-panel p-6 rounded-xl mb-8 animate-slide-up" style={{ animationDelay: '250ms' }}>
              <h3 className="text-lg font-display font-medium gradient-text mb-4 flex items-center">
                <svg className="w-5 h-5 mr-2 text-futuristic-blue dark:text-neon-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                Recommended Securities
              </h3>
              
              <div className="space-y-6">
                {[...new Set(securities.map(sec => sec.assetClass))].map(assetClass => (
                  <div key={assetClass} className="glass-panel p-4 rounded-xl">
                    <h4 className="text-md font-medium text-futuristic-blue dark:text-neon-blue mb-3">{assetClass}</h4>
                    <div className="space-y-4">
                      {securities
                        .filter(sec => sec.assetClass === assetClass)
                        .map((security, index) => (
                          <div key={index} className="p-4 rounded-lg bg-white/50 dark:bg-dark-100/50 backdrop-blur-sm">
                            <div className="flex items-start justify-between">
                              <div>
                                <h5 className="font-medium text-gray-900 dark:text-white">{security.name}</h5>
                                {security.ticker && security.ticker !== "N/A" && (
                                  <p className="text-sm text-gray-500 dark:text-gray-400">Ticker: {security.ticker}</p>
                                )}
                              </div>
                            </div>
                            <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">{security.description}</p>
                            {security.rationale && (
                              <p className="mt-2 text-sm text-futuristic-blue dark:text-neon-blue">
                                <span className="font-medium">Why this security:</span> {security.rationale}
                              </p>
                            )}
                          </div>
                        ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Actions Section */}
          <div className="flex flex-col sm:flex-row justify-between items-center gap-4 mt-10 animate-slide-up" style={{ animationDelay: '300ms' }}>
            <div className="flex space-x-4">
              <button
                onClick={handleAdjustPreferences}
                className="btn-secondary"
              >
                <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Adjust Risk Preferences
              </button>

              <button
                onClick={handleStartOver}
                className="btn-secondary"
              >
                <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Start Over
              </button>
              
              <button
                onClick={() => navigate('/portfolio')}
                className="btn-secondary"
              >
                <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                View Portfolio History
              </button>
            </div>

            <button
              onClick={handleDownloadPDF}
              className="btn-primary"
            >
              <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Download Report
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultsPage; 